// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: metabundle.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "detail.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9dd9c59d2671a01f);
CAPNP_DECLARE_SCHEMA(ff98a30c2c755b60);
CAPNP_DECLARE_SCHEMA(dc1adfafd4d96c9d);

}  // namespace schemas
}  // namespace capnp

namespace tmi {
namespace bundleshop {

struct Source {
  Source() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9dd9c59d2671a01f, 1, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Bundle {
  Bundle() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff98a30c2c755b60, 2, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Grammar {
  Grammar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dc1adfafd4d96c9d, 0, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Source::Reader {
public:
  typedef Source Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasIdentifier() const;
  inline  ::capnp::Text::Reader getIdentifier() const;

  inline bool hasUrl() const;
  inline  ::capnp::Text::Reader getUrl() const;

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline  ::int32_t getRank() const;

  inline bool getDisabled() const;

  inline bool hasKeychain() const;
  inline  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Reader getKeychain() const;

  inline bool hasPathUpdated() const;
  inline  ::tmi::Time::Reader getPathUpdated() const;

  inline bool getUpdateAvailable() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Source::Builder {
public:
  typedef Source Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasIdentifier();
  inline  ::capnp::Text::Builder getIdentifier();
  inline void setIdentifier( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initIdentifier(unsigned int size);
  inline void adoptIdentifier(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownIdentifier();

  inline bool hasUrl();
  inline  ::capnp::Text::Builder getUrl();
  inline void setUrl( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUrl(unsigned int size);
  inline void adoptUrl(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUrl();

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline  ::int32_t getRank();
  inline void setRank( ::int32_t value);

  inline bool getDisabled();
  inline void setDisabled(bool value);

  inline bool hasKeychain();
  inline  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Builder getKeychain();
  inline void setKeychain( ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Reader value);
  inline  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Builder initKeychain();
  inline void adoptKeychain(::capnp::Orphan< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>> disownKeychain();

  inline bool hasPathUpdated();
  inline  ::tmi::Time::Builder getPathUpdated();
  inline void setPathUpdated( ::tmi::Time::Reader value);
  inline  ::tmi::Time::Builder initPathUpdated();
  inline void adoptPathUpdated(::capnp::Orphan< ::tmi::Time>&& value);
  inline ::capnp::Orphan< ::tmi::Time> disownPathUpdated();

  inline bool getUpdateAvailable();
  inline void setUpdateAvailable(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Source::Pipeline {
public:
  typedef Source Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Pipeline getKeychain();
  inline  ::tmi::Time::Pipeline getPathUpdated();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Bundle::Reader {
public:
  typedef Bundle Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUuid() const;
  inline  ::tmi::UUID::Reader getUuid() const;

  inline bool hasOrigin() const;
  inline  ::capnp::Text::Reader getOrigin() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasCategory() const;
  inline  ::capnp::Text::Reader getCategory() const;

  inline bool hasHtmlURL() const;
  inline  ::capnp::Text::Reader getHtmlURL() const;

  inline bool hasDescription() const;
  inline  ::capnp::Text::Reader getDescription() const;

  inline bool hasContactName() const;
  inline  ::capnp::Text::Reader getContactName() const;

  inline bool hasContactEmail() const;
  inline  ::capnp::Text::Reader getContactEmail() const;

  inline bool hasUrl() const;
  inline  ::capnp::Text::Reader getUrl() const;

  inline bool hasUrlUpdated() const;
  inline  ::tmi::Time::Reader getUrlUpdated() const;

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

  inline bool hasPathUpdated() const;
  inline  ::tmi::Time::Reader getPathUpdated() const;

  inline  ::int32_t getRank() const;

  inline  ::int32_t getSize() const;

  inline bool getRequisite() const;

  inline bool getDefault() const;

  inline bool getDependency() const;

  inline bool getInstalled() const;

  inline bool getUpdateAvailable() const;

  inline bool hasKeychain() const;
  inline  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Reader getKeychain() const;

  inline bool hasGrammars() const;
  inline  ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>::Reader getGrammars() const;

  inline bool hasDependants() const;
  inline  ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>::Reader getDependants() const;

  inline bool hasSource() const;
  inline  ::tmi::bundleshop::Source::Reader getSource() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Bundle::Builder {
public:
  typedef Bundle Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUuid();
  inline  ::tmi::UUID::Builder getUuid();
  inline void setUuid( ::tmi::UUID::Reader value);
  inline  ::tmi::UUID::Builder initUuid();
  inline void adoptUuid(::capnp::Orphan< ::tmi::UUID>&& value);
  inline ::capnp::Orphan< ::tmi::UUID> disownUuid();

  inline bool hasOrigin();
  inline  ::capnp::Text::Builder getOrigin();
  inline void setOrigin( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOrigin(unsigned int size);
  inline void adoptOrigin(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOrigin();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasCategory();
  inline  ::capnp::Text::Builder getCategory();
  inline void setCategory( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCategory(unsigned int size);
  inline void adoptCategory(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCategory();

  inline bool hasHtmlURL();
  inline  ::capnp::Text::Builder getHtmlURL();
  inline void setHtmlURL( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHtmlURL(unsigned int size);
  inline void adoptHtmlURL(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHtmlURL();

  inline bool hasDescription();
  inline  ::capnp::Text::Builder getDescription();
  inline void setDescription( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDescription(unsigned int size);
  inline void adoptDescription(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDescription();

  inline bool hasContactName();
  inline  ::capnp::Text::Builder getContactName();
  inline void setContactName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initContactName(unsigned int size);
  inline void adoptContactName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownContactName();

  inline bool hasContactEmail();
  inline  ::capnp::Text::Builder getContactEmail();
  inline void setContactEmail( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initContactEmail(unsigned int size);
  inline void adoptContactEmail(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownContactEmail();

  inline bool hasUrl();
  inline  ::capnp::Text::Builder getUrl();
  inline void setUrl( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUrl(unsigned int size);
  inline void adoptUrl(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUrl();

  inline bool hasUrlUpdated();
  inline  ::tmi::Time::Builder getUrlUpdated();
  inline void setUrlUpdated( ::tmi::Time::Reader value);
  inline  ::tmi::Time::Builder initUrlUpdated();
  inline void adoptUrlUpdated(::capnp::Orphan< ::tmi::Time>&& value);
  inline ::capnp::Orphan< ::tmi::Time> disownUrlUpdated();

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

  inline bool hasPathUpdated();
  inline  ::tmi::Time::Builder getPathUpdated();
  inline void setPathUpdated( ::tmi::Time::Reader value);
  inline  ::tmi::Time::Builder initPathUpdated();
  inline void adoptPathUpdated(::capnp::Orphan< ::tmi::Time>&& value);
  inline ::capnp::Orphan< ::tmi::Time> disownPathUpdated();

  inline  ::int32_t getRank();
  inline void setRank( ::int32_t value);

  inline  ::int32_t getSize();
  inline void setSize( ::int32_t value);

  inline bool getRequisite();
  inline void setRequisite(bool value);

  inline bool getDefault();
  inline void setDefault(bool value);

  inline bool getDependency();
  inline void setDependency(bool value);

  inline bool getInstalled();
  inline void setInstalled(bool value);

  inline bool getUpdateAvailable();
  inline void setUpdateAvailable(bool value);

  inline bool hasKeychain();
  inline  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Builder getKeychain();
  inline void setKeychain( ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Reader value);
  inline  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Builder initKeychain();
  inline void adoptKeychain(::capnp::Orphan< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>> disownKeychain();

  inline bool hasGrammars();
  inline  ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>::Builder getGrammars();
  inline void setGrammars( ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>::Builder initGrammars(unsigned int size);
  inline void adoptGrammars(::capnp::Orphan< ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>> disownGrammars();

  inline bool hasDependants();
  inline  ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>::Builder getDependants();
  inline void setDependants( ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>::Builder initDependants(unsigned int size);
  inline void adoptDependants(::capnp::Orphan< ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>> disownDependants();

  inline bool hasSource();
  inline  ::tmi::bundleshop::Source::Builder getSource();
  inline void setSource( ::tmi::bundleshop::Source::Reader value);
  inline  ::tmi::bundleshop::Source::Builder initSource();
  inline void adoptSource(::capnp::Orphan< ::tmi::bundleshop::Source>&& value);
  inline ::capnp::Orphan< ::tmi::bundleshop::Source> disownSource();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Bundle::Pipeline {
public:
  typedef Bundle Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::tmi::UUID::Pipeline getUuid();
  inline  ::tmi::Time::Pipeline getUrlUpdated();
  inline  ::tmi::Time::Pipeline getPathUpdated();
  inline  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Pipeline getKeychain();
  inline  ::tmi::bundleshop::Source::Pipeline getSource();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Grammar::Reader {
public:
  typedef Grammar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUuid() const;
  inline  ::tmi::UUID::Reader getUuid() const;

  inline bool hasScope() const;
  inline  ::capnp::Text::Reader getScope() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasFileTypes() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getFileTypes() const;

  inline bool hasModeLine() const;
  inline  ::capnp::Text::Reader getModeLine() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Grammar::Builder {
public:
  typedef Grammar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUuid();
  inline  ::tmi::UUID::Builder getUuid();
  inline void setUuid( ::tmi::UUID::Reader value);
  inline  ::tmi::UUID::Builder initUuid();
  inline void adoptUuid(::capnp::Orphan< ::tmi::UUID>&& value);
  inline ::capnp::Orphan< ::tmi::UUID> disownUuid();

  inline bool hasScope();
  inline  ::capnp::Text::Builder getScope();
  inline void setScope( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initScope(unsigned int size);
  inline void adoptScope(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownScope();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasFileTypes();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getFileTypes();
  inline void setFileTypes( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setFileTypes(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initFileTypes(unsigned int size);
  inline void adoptFileTypes(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownFileTypes();

  inline bool hasModeLine();
  inline  ::capnp::Text::Builder getModeLine();
  inline void setModeLine( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initModeLine(unsigned int size);
  inline void adoptModeLine(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownModeLine();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Grammar::Pipeline {
public:
  typedef Grammar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::tmi::UUID::Pipeline getUuid();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Source::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Source::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Source::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Source::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Source::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Source::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Source::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Source::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Source::Reader::hasIdentifier() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Source::Builder::hasIdentifier() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Source::Reader::getIdentifier() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Source::Builder::getIdentifier() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Source::Builder::setIdentifier( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Source::Builder::initIdentifier(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Source::Builder::adoptIdentifier(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Source::Builder::disownIdentifier() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Source::Reader::hasUrl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Source::Builder::hasUrl() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Source::Reader::getUrl() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Source::Builder::getUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Source::Builder::setUrl( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Source::Builder::initUrl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Source::Builder::adoptUrl(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Source::Builder::disownUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Source::Reader::hasPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Source::Builder::hasPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Source::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Source::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Source::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Source::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Source::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Source::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::int32_t Source::Reader::getRank() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Source::Builder::getRank() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Source::Builder::setRank( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Source::Reader::getDisabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool Source::Builder::getDisabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void Source::Builder::setDisabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool Source::Reader::hasKeychain() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Source::Builder::hasKeychain() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Reader Source::Reader::getKeychain() const {
  return ::capnp::_::PointerHelpers< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Builder Source::Builder::getKeychain() {
  return ::capnp::_::PointerHelpers< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Pipeline Source::Pipeline::getKeychain() {
  return  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Source::Builder::setKeychain( ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Builder Source::Builder::initKeychain() {
  return ::capnp::_::PointerHelpers< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Source::Builder::adoptKeychain(
    ::capnp::Orphan< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>> Source::Builder::disownKeychain() {
  return ::capnp::_::PointerHelpers< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Source::Reader::hasPathUpdated() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Source::Builder::hasPathUpdated() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::tmi::Time::Reader Source::Reader::getPathUpdated() const {
  return ::capnp::_::PointerHelpers< ::tmi::Time>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::tmi::Time::Builder Source::Builder::getPathUpdated() {
  return ::capnp::_::PointerHelpers< ::tmi::Time>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::tmi::Time::Pipeline Source::Pipeline::getPathUpdated() {
  return  ::tmi::Time::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Source::Builder::setPathUpdated( ::tmi::Time::Reader value) {
  ::capnp::_::PointerHelpers< ::tmi::Time>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::tmi::Time::Builder Source::Builder::initPathUpdated() {
  return ::capnp::_::PointerHelpers< ::tmi::Time>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Source::Builder::adoptPathUpdated(
    ::capnp::Orphan< ::tmi::Time>&& value) {
  ::capnp::_::PointerHelpers< ::tmi::Time>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::tmi::Time> Source::Builder::disownPathUpdated() {
  return ::capnp::_::PointerHelpers< ::tmi::Time>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Source::Reader::getUpdateAvailable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline bool Source::Builder::getUpdateAvailable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void Source::Builder::setUpdateAvailable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline bool Bundle::Reader::hasUuid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Bundle::Builder::hasUuid() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::tmi::UUID::Reader Bundle::Reader::getUuid() const {
  return ::capnp::_::PointerHelpers< ::tmi::UUID>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::tmi::UUID::Builder Bundle::Builder::getUuid() {
  return ::capnp::_::PointerHelpers< ::tmi::UUID>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::tmi::UUID::Pipeline Bundle::Pipeline::getUuid() {
  return  ::tmi::UUID::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Bundle::Builder::setUuid( ::tmi::UUID::Reader value) {
  ::capnp::_::PointerHelpers< ::tmi::UUID>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::tmi::UUID::Builder Bundle::Builder::initUuid() {
  return ::capnp::_::PointerHelpers< ::tmi::UUID>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Bundle::Builder::adoptUuid(
    ::capnp::Orphan< ::tmi::UUID>&& value) {
  ::capnp::_::PointerHelpers< ::tmi::UUID>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::tmi::UUID> Bundle::Builder::disownUuid() {
  return ::capnp::_::PointerHelpers< ::tmi::UUID>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Bundle::Reader::hasOrigin() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Bundle::Builder::hasOrigin() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Bundle::Reader::getOrigin() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Bundle::Builder::getOrigin() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Bundle::Builder::setOrigin( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Bundle::Builder::initOrigin(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Bundle::Builder::adoptOrigin(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Bundle::Builder::disownOrigin() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Bundle::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Bundle::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Bundle::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Bundle::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Bundle::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Bundle::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Bundle::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Bundle::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Bundle::Reader::hasCategory() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Bundle::Builder::hasCategory() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Bundle::Reader::getCategory() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Bundle::Builder::getCategory() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Bundle::Builder::setCategory( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Bundle::Builder::initCategory(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Bundle::Builder::adoptCategory(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Bundle::Builder::disownCategory() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Bundle::Reader::hasHtmlURL() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Bundle::Builder::hasHtmlURL() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Bundle::Reader::getHtmlURL() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Bundle::Builder::getHtmlURL() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Bundle::Builder::setHtmlURL( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Bundle::Builder::initHtmlURL(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Bundle::Builder::adoptHtmlURL(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Bundle::Builder::disownHtmlURL() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Bundle::Reader::hasDescription() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Bundle::Builder::hasDescription() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Bundle::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Bundle::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Bundle::Builder::setDescription( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Bundle::Builder::initDescription(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Bundle::Builder::adoptDescription(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Bundle::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Bundle::Reader::hasContactName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Bundle::Builder::hasContactName() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Bundle::Reader::getContactName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Bundle::Builder::getContactName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Bundle::Builder::setContactName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Bundle::Builder::initContactName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Bundle::Builder::adoptContactName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Bundle::Builder::disownContactName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Bundle::Reader::hasContactEmail() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Bundle::Builder::hasContactEmail() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Bundle::Reader::getContactEmail() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Bundle::Builder::getContactEmail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Bundle::Builder::setContactEmail( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Bundle::Builder::initContactEmail(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Bundle::Builder::adoptContactEmail(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Bundle::Builder::disownContactEmail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Bundle::Reader::hasUrl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Bundle::Builder::hasUrl() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Bundle::Reader::getUrl() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Bundle::Builder::getUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Bundle::Builder::setUrl( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Bundle::Builder::initUrl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Bundle::Builder::adoptUrl(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Bundle::Builder::disownUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Bundle::Reader::hasUrlUpdated() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Bundle::Builder::hasUrlUpdated() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::tmi::Time::Reader Bundle::Reader::getUrlUpdated() const {
  return ::capnp::_::PointerHelpers< ::tmi::Time>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::tmi::Time::Builder Bundle::Builder::getUrlUpdated() {
  return ::capnp::_::PointerHelpers< ::tmi::Time>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::tmi::Time::Pipeline Bundle::Pipeline::getUrlUpdated() {
  return  ::tmi::Time::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void Bundle::Builder::setUrlUpdated( ::tmi::Time::Reader value) {
  ::capnp::_::PointerHelpers< ::tmi::Time>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::tmi::Time::Builder Bundle::Builder::initUrlUpdated() {
  return ::capnp::_::PointerHelpers< ::tmi::Time>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Bundle::Builder::adoptUrlUpdated(
    ::capnp::Orphan< ::tmi::Time>&& value) {
  ::capnp::_::PointerHelpers< ::tmi::Time>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::tmi::Time> Bundle::Builder::disownUrlUpdated() {
  return ::capnp::_::PointerHelpers< ::tmi::Time>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Bundle::Reader::hasPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Bundle::Builder::hasPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Bundle::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Bundle::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Bundle::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Bundle::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Bundle::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Bundle::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Bundle::Reader::hasPathUpdated() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Bundle::Builder::hasPathUpdated() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::tmi::Time::Reader Bundle::Reader::getPathUpdated() const {
  return ::capnp::_::PointerHelpers< ::tmi::Time>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::tmi::Time::Builder Bundle::Builder::getPathUpdated() {
  return ::capnp::_::PointerHelpers< ::tmi::Time>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::tmi::Time::Pipeline Bundle::Pipeline::getPathUpdated() {
  return  ::tmi::Time::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void Bundle::Builder::setPathUpdated( ::tmi::Time::Reader value) {
  ::capnp::_::PointerHelpers< ::tmi::Time>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::tmi::Time::Builder Bundle::Builder::initPathUpdated() {
  return ::capnp::_::PointerHelpers< ::tmi::Time>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Bundle::Builder::adoptPathUpdated(
    ::capnp::Orphan< ::tmi::Time>&& value) {
  ::capnp::_::PointerHelpers< ::tmi::Time>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::tmi::Time> Bundle::Builder::disownPathUpdated() {
  return ::capnp::_::PointerHelpers< ::tmi::Time>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline  ::int32_t Bundle::Reader::getRank() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Bundle::Builder::getRank() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Bundle::Builder::setRank( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Bundle::Reader::getSize() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Bundle::Builder::getSize() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Bundle::Builder::setSize( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Bundle::Reader::getRequisite() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Bundle::Builder::getRequisite() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Bundle::Builder::setRequisite(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool Bundle::Reader::getDefault() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool Bundle::Builder::getDefault() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void Bundle::Builder::setDefault(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline bool Bundle::Reader::getDependency() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline bool Bundle::Builder::getDependency() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void Bundle::Builder::setDependency(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline bool Bundle::Reader::getInstalled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}

inline bool Bundle::Builder::getInstalled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}
inline void Bundle::Builder::setInstalled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS, value);
}

inline bool Bundle::Reader::getUpdateAvailable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}

inline bool Bundle::Builder::getUpdateAvailable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}
inline void Bundle::Builder::setUpdateAvailable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS, value);
}

inline bool Bundle::Reader::hasKeychain() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Bundle::Builder::hasKeychain() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Reader Bundle::Reader::getKeychain() const {
  return ::capnp::_::PointerHelpers< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Builder Bundle::Builder::getKeychain() {
  return ::capnp::_::PointerHelpers< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Pipeline Bundle::Pipeline::getKeychain() {
  return  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void Bundle::Builder::setKeychain( ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::tmi::MapT< ::capnp::Text,  ::capnp::Text>::Builder Bundle::Builder::initKeychain() {
  return ::capnp::_::PointerHelpers< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Bundle::Builder::adoptKeychain(
    ::capnp::Orphan< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>> Bundle::Builder::disownKeychain() {
  return ::capnp::_::PointerHelpers< ::tmi::MapT< ::capnp::Text,  ::capnp::Text>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Bundle::Reader::hasGrammars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Bundle::Builder::hasGrammars() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>::Reader Bundle::Reader::getGrammars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>::Builder Bundle::Builder::getGrammars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Bundle::Builder::setGrammars( ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>::Builder Bundle::Builder::initGrammars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Bundle::Builder::adoptGrammars(
    ::capnp::Orphan< ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>> Bundle::Builder::disownGrammars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::tmi::bundleshop::Grammar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Bundle::Reader::hasDependants() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Bundle::Builder::hasDependants() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>::Reader Bundle::Reader::getDependants() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>::Builder Bundle::Builder::getDependants() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Bundle::Builder::setDependants( ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>::Builder Bundle::Builder::initDependants(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Bundle::Builder::adoptDependants(
    ::capnp::Orphan< ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>> Bundle::Builder::disownDependants() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::tmi::bundleshop::Bundle,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Bundle::Reader::hasSource() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Bundle::Builder::hasSource() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::tmi::bundleshop::Source::Reader Bundle::Reader::getSource() const {
  return ::capnp::_::PointerHelpers< ::tmi::bundleshop::Source>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::tmi::bundleshop::Source::Builder Bundle::Builder::getSource() {
  return ::capnp::_::PointerHelpers< ::tmi::bundleshop::Source>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::tmi::bundleshop::Source::Pipeline Bundle::Pipeline::getSource() {
  return  ::tmi::bundleshop::Source::Pipeline(_typeless.getPointerField(15));
}
#endif  // !CAPNP_LITE
inline void Bundle::Builder::setSource( ::tmi::bundleshop::Source::Reader value) {
  ::capnp::_::PointerHelpers< ::tmi::bundleshop::Source>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::tmi::bundleshop::Source::Builder Bundle::Builder::initSource() {
  return ::capnp::_::PointerHelpers< ::tmi::bundleshop::Source>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Bundle::Builder::adoptSource(
    ::capnp::Orphan< ::tmi::bundleshop::Source>&& value) {
  ::capnp::_::PointerHelpers< ::tmi::bundleshop::Source>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::tmi::bundleshop::Source> Bundle::Builder::disownSource() {
  return ::capnp::_::PointerHelpers< ::tmi::bundleshop::Source>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool Grammar::Reader::hasUuid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Grammar::Builder::hasUuid() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::tmi::UUID::Reader Grammar::Reader::getUuid() const {
  return ::capnp::_::PointerHelpers< ::tmi::UUID>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::tmi::UUID::Builder Grammar::Builder::getUuid() {
  return ::capnp::_::PointerHelpers< ::tmi::UUID>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::tmi::UUID::Pipeline Grammar::Pipeline::getUuid() {
  return  ::tmi::UUID::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Grammar::Builder::setUuid( ::tmi::UUID::Reader value) {
  ::capnp::_::PointerHelpers< ::tmi::UUID>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::tmi::UUID::Builder Grammar::Builder::initUuid() {
  return ::capnp::_::PointerHelpers< ::tmi::UUID>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Grammar::Builder::adoptUuid(
    ::capnp::Orphan< ::tmi::UUID>&& value) {
  ::capnp::_::PointerHelpers< ::tmi::UUID>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::tmi::UUID> Grammar::Builder::disownUuid() {
  return ::capnp::_::PointerHelpers< ::tmi::UUID>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Grammar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Grammar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Grammar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Grammar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Grammar::Builder::setScope( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Grammar::Builder::initScope(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Grammar::Builder::adoptScope(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Grammar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Grammar::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Grammar::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Grammar::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Grammar::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Grammar::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Grammar::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Grammar::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Grammar::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Grammar::Reader::hasFileTypes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Grammar::Builder::hasFileTypes() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader Grammar::Reader::getFileTypes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Grammar::Builder::getFileTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Grammar::Builder::setFileTypes( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Grammar::Builder::setFileTypes(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Grammar::Builder::initFileTypes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Grammar::Builder::adoptFileTypes(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> Grammar::Builder::disownFileTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Grammar::Reader::hasModeLine() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Grammar::Builder::hasModeLine() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Grammar::Reader::getModeLine() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Grammar::Builder::getModeLine() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Grammar::Builder::setModeLine( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Grammar::Builder::initModeLine(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Grammar::Builder::adoptModeLine(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Grammar::Builder::disownModeLine() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

